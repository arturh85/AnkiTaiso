name: 🖼 Tests
on:
  push:
  pull_request:

jobs:
  test:
    name: 🖼 Tests with ${{ matrix.render-driver }}
    runs-on: ubuntu-latest
    # Only run the workflow if it's not a PR or if it's a PR from a fork.
    # This prevents duplicate workflows from running on PR's that originate
    # from the repository itself.
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true
      GODOT_SILENCE_ROOT_WARNING: true
    strategy:
      # Don't cancel other runners if one fails.
      fail-fast: false
      matrix:
        # Put the rendering drivers you want to use for tests here.
        render-driver: [vulkan] # also: opengl3
    defaults:
      run:
        # Use bash shells on all platforms.
        shell: bash
    steps:
      - name: 🧾 Checkout
        uses: actions/checkout@v4
        with:
          # If using git-lfs (large file storage), this ensures that your files
          # are checked out properly.
          lfs: false
          # Make sure any git submodules are checked out as well.
          submodules: 'recursive'

      - name: 💽 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          # Use the .NET SDK from global.json in the root of the repository.
          global-json-file: godot/global.json

      - name: 📦 Restore Dependencies
        run: cd godot; dotnet restore

      - name: 💾 Add Graphics Driver Emulators Source
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo add-apt-repository -n ppa:kisak/kisak-mesa

      - name: 💾 Install Graphics Driver Emulators
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: mesa-vulkan-drivers binutils rsync xvfb
          version: 1.0

      - name: 🤖 Setup Godot
        uses: chickensoft-games/setup-godot@v2
        with:
          # Version must include major, minor, and patch, and be >= 4.0.0
          # Pre-release label is optional.
          #
          # In this case, we are using the version from global.json.
          #
          # This allows checks on renovatebot PR's to succeed whenever
          # renovatebot updates the Godot SDK version.
          version: godot/global.json
          cache: true
          # Use .NET-enabled version of Godot (the default is also true).
          use-dotnet: true
          # Include the Godot Export Templates (the default is false).
          include-templates: false

      - name: 🔬 Verify Setup
        run: |
          dotnet --version
          godot --version

      - name: 🧑‍🔬 Generate .NET Bindings
        run: |
          dotnet tool install --global Chickensoft.GodotEnv
          export PATH="$PATH:/root/.dotnet/tools"
          cd godot
          godotenv addons install
          godot --headless --build-solutions --quit || exit 0

      - name: 🦺 Build Projects
        run: cd godot; dotnet build

      - name: 🌋 Run Unit Tests
        run: cd godot; dotnet test || exit 1

      - name: 🌋 Run Integration Tests in Godot
        run: |
          cd godot
          xvfb-run godot --audio-driver Dummy --rendering-driver ${{ matrix.render-driver }} --run-tests --quit-on-finish --coverage

          # The --coverage flag is used by GoDotTest to control the exit code
          # of Godot by force-exiting through C#.
          #
          # Since Godot tends to exit with non-zero exit codes (even on success)
          # this flag allows GoDotTest to ensure that this step will only fail
          # when the tests fail.

          echo "Finished running tests in Godot with emulated ${{ matrix.render-driver }} graphics."

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            docs:
              - 'docs/**'

      - name: 🔬 Setup docs
        if: steps.changes.outputs.docs == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: 🧾 Generate docs
        if: steps.changes.outputs.docs == 'true'
        run: ./scripts/generate-docs.ps1
        shell: pwsh

      - name: 🧾 Build docs
        if: steps.changes.outputs.docs == 'true'
        run: |
          pip install mkdocs mkdocs-awesome-pages-plugin mkdocs-mermaid2-plugin mkdocs_puml_file mkdocs_puml plantuml
          mkdir public && mkdocs build -d public/docs

      - name: 🦺 Deploy docs
        if: steps.changes.outputs.docs == 'true'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
